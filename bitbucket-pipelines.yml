definitions:
  caches:
    service1: $HOME/.cache/service1
    invalid_cache: $HOME/.cache/non-existing-folder

image: alpine

pipelines:
  custom:
    test:
      - step:
          name: Basic Test
          script:
            - cat /etc/os-release
            - id

    test_after_script:
      - step:
          name: Test After Script
          script:
            - cat /etc/os-release
            - exit 2
          after-script:
            - echo "Doing cleanup"
            - echo "Exit Code was ${BITBUCKET_EXIT_CODE}"

    test_cache_alpine:
      - step:
          name: Create Cache
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - sh -c 'if [ -d "${CACHE_DIR}" ]; then rm -rf "${CACHE_DIR}"; fi'
            - mkdir -p "${CACHE_DIR}"
            - dd if=/dev/random of=${CACHE_DIR}/a bs=2048 count=1
            - dd if=/dev/random of=${CACHE_DIR}/b bs=2048 count=1
            - md5sum ${CACHE_DIR}/* > MD5SUM
            - mv MD5SUM ${CACHE_DIR}/
      - step:
          name: Ensure Cache Exists
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - md5sum -c ${CACHE_DIR}/MD5SUM

    test_cache_debian:
      - step:
          name: Create Cache
          image: debian:buster
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - sh -c 'if [ -d "${CACHE_DIR}" ]; then rm -rf "${CACHE_DIR}"; fi'
            - mkdir -p "${CACHE_DIR}"
            - dd if=/dev/random of=${CACHE_DIR}/a bs=2048 count=1
            - dd if=/dev/random of=${CACHE_DIR}/b bs=2048 count=1
            - md5sum ${CACHE_DIR}/* > MD5SUM
            - mv MD5SUM ${CACHE_DIR}/
      - step:
          name: Ensure Cache Exists
          image: debian:buster
          caches:
            - service1
          script:
            - export CACHE_DIR=$HOME/.cache/service1
            - md5sum -c ${CACHE_DIR}/MD5SUM

    test_invalid_cache:
      - step:
          name: Test Invalid Cache
          caches:
            - invalid_cache
          script:
            - exit 0

    test_artifacts:
      - step:
          name: Create Artifacts
          artifacts:
            - ~/artifact-in-home
            - valid-folder/**
            - invalid-folder/**
            - folder-name
            - file-name
          script:
            - echo foo > ~/artifact-in-home
            - mkdir -p valid-folder/sub/sub/sub folder-name
            - touch valid-folder/a valid-folder/b valid-folder/sub/c
            - touch folder-name/a folder-name/b
            - touch file-name
      - step:
          name: Validate Artifacts
          script:
            - ls -R
            - "[ -e valid-folder/a ] || exit 1"
            - "[ -e valid-folder/b ] || exit 1"
            - "[ -e valid-folder/sub/c ] || exit 1"
            - "[ -e file-name ] || exit 1"

            - "[ -e ~/artifact-in-home ] && exit 1"
            - "[ -d valid-folder/sub/sub ] && exit 1"
            - "[ -d invalid-folder ] && exit 1"
            - "[ -d folder-name ] && exit 1"
            - "[ -d root ] && exit 1"
            - exit 0

    test_deployment:
      - step:
          name: Basic Test
          deployment: Foo
          script:
            - 'echo "Deployment Environment: ${BITBUCKET_DEPLOYMENT_ENVIRONMENT}"'
            - if [ -z "${BITBUCKET_DEPLOYMENT_ENVIRONMENT}" ]; then
            -   exit 1
            - fi

    test_docker_in_docker:
      - step:
          name: DinD Wut?
          script:
            - ./gather.sh | tee alpine.log
            - apk add --no-cache iproute2 git
            - git status
            - docker pull "postgis/postgis:9.6-2.5"
            - docker run -d --name postgres -p 1337:5432 -e POSTGRES_HOST_AUTH_METHOD=trust postgis/postgis:9.6-2.5
            - sleep 5
            - docker ps
            - env | sort
            - ss -ltpn
          after-script:
            - echo "Exit code is $BITBUCKET_EXIT_CODE"
            - "sh -c 'exit 1'"
            - echo "Exit code is $BITBUCKET_EXIT_CODE"
          services:
            - docker
          caches:
            - docker
          artifacts:
            - "scripts/**"

    test_run_as_user:
      - step:
          name: Test Default User
          script:
            - 'if [ "$(id -u)" != "0" ]; then'
            -   'echo "User is $(id)"'
            -    exit 1
            - fi

            - touch foo
            - 'if [ "$(stat -c "%u" foo)" != "0" ]; then'
            -   'echo "File is $(stat foo)"'
            -    exit 1
            - fi
      - step:
          name: Test Custom User
          image:
            name: alpine
            run-as-user: 1000
          script:
            - 'if [ "$(id -u)" != "1000" ]; then'
            -   'echo "User is $(id)"'
            -    exit 1
            - fi

            - touch foo
            - 'if [ "$(stat -c "%u" foo)" != "1000" ]; then'
            -   'echo "File is $(stat foo)"'
            -    exit 1
            - fi
